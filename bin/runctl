#!/bin/bash

#------------------------------------------------------------------------------
# Global constants:
#------------------------------------------------------------------------------

readonly DOCKER=`which docker`
readonly IPCMD=`which ip`
readonly BRCTL=`which brctl`

#------------------------------------------------------------------------------
# Source the configuration:
#------------------------------------------------------------------------------

[ -f /etc/bootpaas/boot.conf ] && . /etc/bootpaas/boot.conf || exit 99

#------------------------------------------------------------------------------
# To be called by ExecStartPre:
#------------------------------------------------------------------------------

function run_pre {
  $DOCKER kill $ID || exit 1
  $DOCKER rm $ID || exit 2
  $DOCKER pull $IMAGE && return 0
}

#------------------------------------------------------------------------------
# To be called by ExecStart:
#------------------------------------------------------------------------------

function run_start {
  exec $DOCKER run -t \
  --privileged \
  --volume   /data/boot/dnsmasq:/var/lib/dnsmasq \
  --volume   /data/boot/pxelinux:/tftpboot/pxelinux.cfg \
  --volume   /data/boot/images:/tftpboot/images \
  --hostname $HOSTNAME \
  --name     $ID \
  --net      none \
  --env      WAIT_IFACE=eth1 \
  $IMAGE \
  --dhcp-hostsfile=/var/lib/dnsmasq/dhcp_hosts \
  --dhcp-range=$DHCP_RANGE \
  --dhcp-option=$DHCP_OPTION \
  --local=/$DOMAIN/ \
  --domain=$DOMAIN \
  --log-queries \
  --log-dhcp \
  --log-facility=-
}

#------------------------------------------------------------------------------
# To be called by ExecStartPost:
#------------------------------------------------------------------------------

function run_post {

  # Wait for the container:
  RETRIES=10; while [ $RETRIES -gt 0 ]; do
    PID=$($DOCKER inspect --format='{{ .State.Pid }}' \
    $ID 2> /dev/null | grep -oE "^[0-9]+") || PID=0
    [ $PID -gt 0 ] && break
    sleep 1; RETRIES=$((RETRIES - 1))
  done

  # Setup the environment:
  [ $RETRIES -eq 0 ] && exit 1
  [ ! -d /var/run/netns ] && mkdir -p /var/run/netns
  ln -fs /proc/$PID/ns/net /var/run/netns/$PID || exit 2

  # Host-side network:
  $IPCMD link add ${ID}-int type veth peer name veth-${ID} || exit 3
  $IPCMD link set veth-${ID} master br0 || exit 4
  $IPCMD link set veth-${ID} up || exit 5
  $IPCMD link set netns $PID dev ${ID}-int || exit 6

  # Container-side network:
  $IPCMD netns exec $PID ip link set ${ID}-int name eth1 || exit 7
  $IPCMD netns exec $PID ip addr add ${IP}/${PREFIX} dev eth1 || exit 8
  $IPCMD netns exec $PID ip route delete default &> /dev/null
  $IPCMD netns exec $PID ip link set eth1 up || exit 9
  $IPCMD netns exec $PID ip route replace default via $GATEWAY || exit 10

  # Setup host DNS:
  echo "nameserver $IP" | resolvconf -m 0 -a $ID || exit 11
}

#------------------------------------------------------------------------------
# To be called by ExecStop:
#------------------------------------------------------------------------------

function run_stop {

  $DOCKER stop $ID || exit 1

  $BRCTL show | grep -q veth-${ID} && {
    $IPCMD link del veth-${ID} || exit 2
  }

  return 0
}

#------------------------------------------------------------------------------
# Entry point:
#------------------------------------------------------------------------------

case $1 in pre|start|post|stop) run_$1 ;; esac
