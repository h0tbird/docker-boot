#!/bin/bash

#------------------------------------------------------------------------------
# Globals:
#------------------------------------------------------------------------------

# Return codes:
readonly E_BAD_CMD=10
readonly E_BAD_CONF=11

# Commands:
readonly CMD_DOCKER=$(type -P docker); [ -z "${CMD_DOCKER}" ] && exit ${E_BAD_CMD}
readonly CMD_IP=$(type -P ip); [ -z "${CMD_IP}" ] && exit ${E_BAD_CMD}
readonly CMD_BRCTL=$(type -P brctl); [ -z "${CMD_BRCTL}" ] && exit ${E_BAD_CMD}
readonly CMD_MD5SUM=$(type -P md5sum); [ -z "${CMD_MD5SUM}" ] && exit ${E_BAD_CMD}
readonly CMD_HEXDUMP=$(type -P hexdump); [ -z "${CMD_HEXDUMP}" ] && exit ${E_BAD_CMD}

#------------------------------------------------------------------------------
# Source and verify the configuration:
#------------------------------------------------------------------------------

[ -f /etc/booddies/boot.conf ] && \
source /etc/booddies/boot.conf || exit ${E_BAD_CONF}

[ -z "${ID}" ] && echo 'Ops! ID is not set' && exit ${E_BAD_CONF}
[ -z "${IMAGE}" ] && echo 'Ops! IMAGE is not set' && exit ${E_BAD_CONF}
[ -z "${HOSTNAME}" ] && echo 'Ops! HOSTNAME is not set' && exit ${E_BAD_CONF}
[ -z "${DATA_DIR}" ] && echo 'Ops! DATA_DIR is not set' && exit ${E_BAD_CONF}
[ -z "${DHCP_RANGE}" ] && echo 'Ops! DHCP_RANGE is not set' && exit ${E_BAD_CONF}
[ -z "${DHCP_OPTION}" ] && echo 'Ops! DHCP_OPTION is not set' && exit ${E_BAD_CONF}
[ -z "${DOMAIN}" ] && echo 'Ops! DOMAIN is not set' && exit ${E_BAD_CONF}
[ -z "${IP}" ] && echo 'Ops! IP is not set' && exit ${E_BAD_CONF}
[ -z "${IP_PREFIX}" ] && echo 'Ops! IP_PREFIX is not set' && exit ${E_BAD_CONF}
[ -z "${GATEWAY}" ] && echo 'Ops! GATEWAY is not set' && exit ${E_BAD_CONF}
[ -z "${DNS_UPSTREAMS}" ] && echo 'Ops! DNS_UPSTREAMS is not set' && exit ${E_BAD_CONF}
[ -z "${HOST_BRIDGE}" ] && echo 'Ops! HOST_BRIDGE is not set' && exit ${E_BAD_CONF}
[ -z "${IFACE}" ] && echo 'Ops! IFACE is not set' && exit ${E_BAD_CONF}
[ -z "${OUI}" ] && echo 'Ops! OUI is not set' && exit ${E_BAD_CONF}

#------------------------------------------------------------------------------
# Functions:
#------------------------------------------------------------------------------

function genmac() {
  echo "${HOSTNAME}" | ${CMD_MD5SUM} | \
  ${CMD_HEXDUMP} -n3 -e "/3 \"${OUI}\" 3/1 \":%02X\""
}

#------------------------------------------------------------------------------
# Function to be called by ExecStartPre:
#------------------------------------------------------------------------------

function run_pre() {

  # Create the data directories if not present:
  [ -d ${DATA_DIR}/dnsmasq ] || mkdir -p ${DATA_DIR}/dnsmasq
  [ -d ${DATA_DIR}/pxelinux ] || mkdir -p ${DATA_DIR}/pxelinux
  [ -d ${DATA_DIR}/images ] || mkdir -p ${DATA_DIR}/images

  # Update the host's DNS configuration:
  local MSG1="[Pre] Updating host's resolv.conf configuration..."
  local MSG2="[Pre] OK! Host's resolv.conf has been updated"
  local MSG3="[Pre] Ops! Cannot update host's resolv.conf"
  echo ${MSG1}; echo > /etc/resolv.conf && \
  for i in ${DNS_UPSTREAMS}; do echo "nameserver ${i}" >> /etc/resolv.conf; done && \
  echo ${MSG2} || { echo ${MSG3}; exit 12; }

  # Kill the container if it is running:
  local MSG1="[Pre] Checking whether '${ID}' container is running..."
  local MSG2="[Pre] The container '${ID}' is running, killing it..."
  local MSG3="[Pre] OK! The container '${ID}' has been killed"
  local MSG4="[Pre] Ops! Failed to kill the container '${ID}'"
  local MSG5="[Pre] OK! The container '${ID}' is not running"
  echo ${MSG1}; ${CMD_DOCKER} ps | grep -q ${ID} && {
  echo ${MSG2}; ${CMD_DOCKER} kill ${ID} &> /dev/null && echo ${MSG3} || {
  echo ${MSG4}; exit 2; } } || echo ${MSG5}

  # Delete the container if it does exists:
  local MSG1="[Pre] Checking whether '${ID}' container exists..."
  local MSG2="[Pre] The container '${ID}' exists, deleting it..."
  local MSG3="[Pre] OK! The container '${ID}' has been deleted"
  local MSG4="[Pre] Ops! Failed to delete the container '${ID}'"
  local MSG5="[Pre] OK! The container '${ID}' does not exists"
  echo ${MSG1}; ${CMD_DOCKER} ps -a | grep -q $ID && {
  echo ${MSG2}; ${CMD_DOCKER} rm ${ID} &> /dev/null && echo ${MSG3} || {
  echo ${MSG4}; exit 3; } } || echo ${MSG5}

  # Delete the host-side network interface if present:
  local MSG1="[Pre] Checking whether 'veth-${ID}' interface exists..."
  local MSG2="[Pre] The interface 'veth-${ID}' exists, deleting it..."
  local MSG3="[Pre] OK! The interface 'veth-${ID}' has been deleted"
  local MSG4="[Pre] Ops! Failed to delete the interface 'veth-${ID}'"
  local MSG5="[Pre] OK! The interface 'veth-${ID}' does not exists"
  echo ${MSG1}; ${CMD_IP} l show dev veth-${ID} &> /dev/null && {
  echo ${MSG2}; ${CMD_IP} link del veth-${ID} &> /dev/null && echo ${MSG3} || {
  echo ${MSG4}; exit 4; } } || echo ${MSG5}

  # Create the host's bridge interface if not present:
  local MSG1="[Pre] Checking whether '${HOST_BRIDGE}' interface exists..."
  local MSG2="[Pre] The interface '${HOST_BRIDGE}' is not present, creating it..."
  local MSG3="[Pre] OK! The interface '${HOST_BRIDGE}' has been created"
  local MSG4="[Pre] Ops! Failed to create interface '${HOST_BRIDGE}'"
  local MSG5="[Pre] OK! The interface '${HOST_BRIDGE}' exists"
  echo ${MSG1}; ! ${CMD_IP} l show dev ${HOST_BRIDGE} &> /dev/null && {
  echo ${MSG2}; ${CMD_BRCTL} addbr ${HOST_BRIDGE} && echo ${MSG3} || {
  echo ${MSG4}; exit 5; } } || echo ${MSG5}

  # Download the image if not present or FORCE_PULL_IMAGE is true:
  local MSG1="[Pre] Checking if '${IMAGE}' has to be downloaded..."
  local MSG2="[Pre] Yes, downloading the image '${IMAGE}' now..."
  local MSG3="[Pre] OK! The image '${IMAGE}' is up to date"
  local MSG4="[Pre] Ops! Failed to download the image '${IMAGE}'"
  local MSG5="[Pre] OK! The image '${IMAGE}' already exists"
  (! ${CMD_DOCKER} images | grep "${IMAGE%%:*}" | grep -q "${IMAGE##*:}"); COND1=$?
  [ "${FORCE_PULL_IMAGE}" == 'true' ]; COND2=$?
  echo ${MSG1}; [[ "${COND1}" -eq 0 || "${COND2}" -eq 0 ]] && {
  echo ${MSG2}; ${CMD_DOCKER} pull ${IMAGE} &> /dev/null && echo ${MSG3} || {
  echo ${MSG4}; exit 6; } } || echo ${MSG5}
}

#------------------------------------------------------------------------------
# Function to be called by ExecStart:
#------------------------------------------------------------------------------

function run_start() {
  exec ${CMD_DOCKER} run -t \
  --privileged \
  --volume   "${DATA_DIR}/dnsmasq:/var/lib/dnsmasq" \
  --volume   "${DATA_DIR}/pxelinux:/tftpboot/pxelinux.cfg" \
  --volume   "${DATA_DIR}/images:/tftpboot/images" \
  --hostname "${HOSTNAME}" \
  --name     "${ID}" \
  --net      none \
  --env      WAIT_NETWORK=true \
  --env      DNS_UPSTREAMS="${DNS_UPSTREAMS}" \
  ${IMAGE} \
  --dhcp-hostsfile=/var/lib/dnsmasq/dhcp_hosts \
  --dhcp-range="${DHCP_RANGE}" \
  --dhcp-option="${DHCP_OPTION}" \
  --local="/${DOMAIN}/" \
  --domain="${DOMAIN}" \
  --log-dhcp \
  --log-facility=-
}

#------------------------------------------------------------------------------
# Function to be called by ExecStartPost:
#------------------------------------------------------------------------------

function run_post() {

  # Wait for the container to become accessible:
  local MSG1="[Post] Waiting for the '${ID}' container to become accessible..."
  local MSG2="[Post] OK! The container '${ID}' looks accessible now"
  local MSG3="[Post] Ops! Time out. Where is the '${ID}' container?"

  echo ${MSG1}; RETRIES=10; while [ ${RETRIES} -gt 0 ]; do
    PID=$(${CMD_DOCKER} inspect --format='{{ .State.Pid }}' \
    ${ID} 2> /dev/null | grep -oE "^[0-9]+") || PID=0
    [ ${PID} -gt 0 ] && break
    sleep 1; RETRIES=$((RETRIES - 1))
  done

  [ ${RETRIES} -gt 0 ] && echo ${MSG2} || {
    echo ${MSG3}; exit 1
  }

  # Make the container's network namespace accessible:
  echo "[Post] Make sure the container's network namespace is accessible..."
  [ ! -d /var/run/netns ] && mkdir -p /var/run/netns
  ln -fs /proc/${PID}/ns/net /var/run/netns/${PID} || exit 2
  echo "[Post] OK! It should be accessible now"

  # Create a pair of peer veth interfaces on the host:
  local MSG1="[Post] Adding '${ID}-int' as peer of 'veth-${ID}'..."
  local MSG2="[Post] OK! Both '${ID}-int' and 'veth-${ID}' have been added"
  local MSG3="[Post] Ops! Cannot add interfaces '${ID}-int' nor 'veth-${ID}'"
  echo ${MSG1}; ${CMD_IP} link add ${ID}-int address $(genmac) \
  type veth peer name veth-${ID} && echo ${MSG2} || { echo ${MSG3}; exit 3; }

  # Connect the host peer interface to the host's bridge:
  local MSG1="[Post] Connecting 'veth-${ID}' interface to '${HOST_BRIDGE}'"
  local MSG2="[Post] OK! Interface 'veth-${ID}' is now connected to '${HOST_BRIDGE}'"
  local MSG3="[Post] Ops! Cannot connect 'veth-${ID}' interface to '${HOST_BRIDGE}'"
  echo ${MSG1}; ${CMD_IP} link set veth-${ID} master ${HOST_BRIDGE} && \
  echo ${MSG2} || { echo ${MSG3}; exit 4; }

  # Bring up the host's peer interface link:
  local MSG1="[Post] Bringing up 'veth-${ID}' link..."
  local MSG2="[Post] OK! Link 'veth-${ID}' is up"
  local MSG3="[Post] Ops! Cannot bring up 'veth-${ID}' link"
  echo ${MSG1}; ${CMD_IP} link set veth-${ID} up && \
  echo ${MSG2} || { echo ${MSG3}; exit 5; }

  # Inject the container's peer interface into the container:
  local MSG1="[Post] Injecting '${ID}-int' peer into the container..."
  local MSG2="[Post] OK! Now '${ID}-int' lives inside the container"
  local MSG3="[Post] Ops! Cannot inject '${ID}-int' into the container"
  echo ${MSG1}; ${CMD_IP} link set netns ${PID} dev ${ID}-int && \
  echo ${MSG2} || { echo ${MSG3}; exit 6; }

  # Rename the container's peer interface:
  local MSG1="[Post] Renaming container's '${ID}-int' to ${IFACE}..."
  local MSG2="[Post] OK! '${ID}-int' has been renamed to ${IFACE}"
  local MSG3="[Post] Ops! Cannot rename '${ID}-int'"
  echo ${MSG1}; ${CMD_IP} netns exec ${PID} ${CMD_IP} link set ${ID}-int name ${IFACE} && \
  echo ${MSG2} || { echo ${MSG3}; exit 7; }

  # Add a static IP to the container's interface:
  local MSG1="[Post] Adding ${IP}/${IP_PREFIX} to container's ${IFACE}..."
  local MSG2="[Post] OK! The current IP is ${IP}/${IP_PREFIX}"
  local MSG3="[Post] Ops! Cannot set IP to ${IP}/${IP_PREFIX}"
  echo ${MSG1}; ${CMD_IP} netns exec ${PID} ${CMD_IP} addr add ${IP}/${IP_PREFIX} dev ${IFACE} && \
  echo ${MSG2} || { echo ${MSG3}; exit 8; }

  # Bring up container's interface link:
  local MSG1="[Post] Bringing up container's ${IFACE} link..."
  local MSG2="[Post] OK! Container's ${IFACE} link is up"
  local MSG3="[Post] Ops! Cannot bring up container's ${IFACE} link"
  echo ${MSG1}; ${CMD_IP} netns exec ${PID} ${CMD_IP} link set ${IFACE} up && \
  echo ${MSG2} || { echo ${MSG3}; exit 9; }

  # Setup the container's default gateway:
  local MSG1="[Post] Setting ${GATEWAY} as container's default gateway..."
  local MSG2="[Post] OK! Container's default gateway is ${GATEWAY}"
  local MSG3="[Post] Ops! Cannot set container's gateway to ${GATEWAY}"
  echo ${MSG1}; ${CMD_IP} netns exec ${PID} ${CMD_IP} route replace default via ${GATEWAY} && \
  echo ${MSG2} || { echo ${MSG3}; exit 10; }

  # Update the host's DNS configuration:
  local MSG1="[Post] Updating host's resolv.conf configuration..."
  local MSG2="[Post] OK! Host's resolv.conf has been updated"
  local MSG3="[Post] Ops! Cannot update host's resolv.conf"
  echo ${MSG1}; echo "search ${DOMAIN}" > /etc/resolv.conf && \
  echo "nameserver ${IP}" >> /etc/resolv.conf && \
  echo ${MSG2} || { echo ${MSG3}; exit 11; }
}

#------------------------------------------------------------------------------
# Function to be called by ExecStop:
#------------------------------------------------------------------------------

function run_stop() {

  # Update the host's DNS configuration:
  local MSG1="[Stop] Updating host's resolv.conf configuration..."
  local MSG2="[Stop] OK! Host's resolv.conf has been updated"
  local MSG3="[Stop] Ops! Cannot update host's resolv.conf"
  echo ${MSG1}; sed -i "/${IP}/d" /etc/resolv.conf && \
  for i in ${DNS_UPSTREAMS}; do echo "nameserver ${i}" >> /etc/resolv.conf; done && \
  echo ${MSG2} || { echo ${MSG3}; exit 12; }

  # Stop the container if it is running:
  local MSG1="[Stop] Checking whether '${ID}' container is running..."
  local MSG2="[Stop] The container '${ID}' is running, stopping it..."
  local MSG3="[Stop] OK! The container '${ID}' has been stopped"
  local MSG4="[Stop] Ops! Failed to stop the container '${ID}'"
  local MSG5="[Stop] OK! The container '${ID}' is not running"
  echo ${MSG1}; ${CMD_DOCKER} ps | grep -q ${ID} && {
  echo ${MSG2}; ${CMD_DOCKER} stop ${ID} &> /dev/null && echo ${MSG3} || {
  echo ${MSG4}; exit 13; } } || echo ${MSG5}

  # Delete the host-side network interface if present:
  local MSG1="[Stop] Checking whether 'veth-${ID}' interface exists..."
  local MSG2="[Stop] The interface 'veth-${ID}' exists, deleting it..."
  local MSG3="[Stop] OK! The interface 'veth-${ID}' has been deleted"
  local MSG4="[Stop] Ops! Failed to delete the interface 'veth-${ID}'"
  local MSG5="[Stop] OK! The interface 'veth-${ID}' does not exists"
  echo ${MSG1}; ${CMD_IP} l show dev veth-${ID} &> /dev/null && {
  echo ${MSG2}; ${CMD_IP} link del veth-${ID} &> /dev/null && echo ${MSG3} || {
  echo ${MSG4}; exit 14; } } || echo ${MSG5}
}

#------------------------------------------------------------------------------
# Entry point:
#------------------------------------------------------------------------------

case $1 in pre|start|post|stop) run_$1 ;; esac
